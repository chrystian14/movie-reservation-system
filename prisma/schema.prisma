// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String   @map("first_name") @db.VarChar(50)
  lastName  String   @map("last_name") @db.VarChar(50)
  email     String   @unique @map("email") @db.VarChar(255)
  password  String   @map("password") @db.VarChar(255)
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  reservations Reservation[]

  @@map("users")
}

model Movie {
  id          String @id @default(uuid())
  title       String @db.VarChar(255)
  description String @db.VarChar(255)
  posterUrl   String @map("poster_url") @db.VarChar(255)

  genreId  String     @map("genre_id")
  genre    Genre      @relation(fields: [genreId], references: [id])
  Showtime Showtime[]

  @@map("movies")
}

model Genre {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(50)

  movies Movie[]

  @@map("genres")
}

model Room {
  id     String @id @default(uuid())
  name   String @db.VarChar(50)
  number Int    @db.SmallInt

  seats     Seat[]
  showtimes Showtime[]

  @@map("rooms")
}

model Seat {
  id     String  @id @default(uuid())
  column String  @db.VarChar(1)
  row    Int     @db.SmallInt
  price  Decimal @db.Decimal(8, 2)

  roomId String @map("room_id")
  room   Room   @relation(fields: [roomId], references: [id])

  reservations Reservation[]

  @@map("seats")
}

model Showtime {
  id       String   @id @default(uuid())
  datetime DateTime

  movieId String @map("movie_id")
  movie   Movie  @relation(fields: [movieId], references: [id])

  roomId String @map("room_id")
  room   Room   @relation(fields: [roomId], references: [id])

  reservations Reservation[]

  @@map("showtimes")
}

model Reservation {
  id         String            @id @default(uuid())
  status     ReservationStatus @default(CONFIRMED)
  amountPaid Decimal           @map("amount_paid") @db.Decimal(8, 2)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  showtimeId String   @map("showtime_id")
  showtime   Showtime @relation(fields: [showtimeId], references: [id])

  seatId String @map("seat_id")
  seat   Seat   @relation(fields: [seatId], references: [id])

  @@map("reservations")
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
}
